@startuml lunar-lander
title lunar-lander
class PhysicalObject{
    #weight
    #position
    #rotation
    #speed
    #momentum
    +set_position()
    +set_speed()
    +set_momentum()
    +apply_force()
    +apply_rotation()
    +move()
}
interface GraphicalObject{
    -color: SDL_Color
    +set_color()
    +get_color()
    +{abstract} invoke_render(Renderer&)
}
class GraphicalPoints{
    +invoke_renderer(Renderer&)
    +get_points() const: SDL_Point*
    +get_size(): int
    #points: vector<SDL_Point>

}
class GraphicalLines{
    +invoke_renderer(Renderer&)
    +get_points() const: SDL_Point*
    +get_size(): int
    #lines: vector<SDL_Point>

}
class GraphicalGeometry{
    +invoke_renderer(Renderer&)
    #vertex: vector<SDL_Vertex>
}
class GraphicalText{
    #m_rect: SDL_Rect
    #m_modified: bool
    #text: string
    #font: font_type
    +get_quad()
    +set_position()
    +set_size()
    +invoke_renderer(Renderer&)
    +set_text(string, font_type)
    +get_text()
    +get_font
}
class BackgroundImage{
    +BackgrounImage();
    -generate_random_stars()
}
class Game{
    +Game()
    +~Game()
    +start()
    +finish()
    +get_user_input()
    +update()
}
class Lander{
    +fuel
    +explode()
}
class Terrain{
    +Terrain()
    -generate_hills()
}
class GameWindow{
    +GameWindow()
    +~GameWindow()
    -graphical_objects: list
    -SDL_Window
    -renderer: unique_ptr<Renderer>
    +update_graphics()
    +add_new_graphical_object()
    
}
class Renderer{
    +Renderer(SDL_Window*)
    +~Renderer()
    +set_drawing_color(SDL_Color)
    +clear_screen()
    +show_screem()
    +render_points(GraphicalPoints*)
    +render_line(GraphicalLines*)
    +render_geometry(GraphicalGeometry*)
    +render_text(GraphicalText*)
    -renderer: SDL_Renderer*
    -fonts: array
    -textures_for_text_rendering: unordered_map
}
class Player{
    +points
    +add_points()
    +evaluate_landing()
}
class Physics{
    -physical_objects: list
    +update_physics()
    -check_collisions()
}
class LandingZone{
    +award
    +get_points()
}
class UI{
    +get_quad(): SDL_Rect
    -ui_elements: list
    -fonts: array
}
abstract UIElement{
    -position: SDL_Point
    -size: SDL_Point
}
class UITextElement{
    invoke_renderer(Renderer&)

}
class UIGraphicalElement{

}

PhysicalObject <|-- Lander
GraphicalObject <|.. GraphicalGeometry
GraphicalObject <|.. GraphicalLines
GraphicalObject <|.. GraphicalPoints
GraphicalObject <|-- GraphicalText
GraphicalLines <|-- Terrain
Game *-- GameWindow
GraphicalGeometry <|-- Lander
Player *-- Lander
Game *-- Physics
Game *-- Player
Game *-- Terrain
Terrain *- "1.*"LandingZone
UI *-- "1.*" UIElement
Game *-- UI
GraphicalText <|.. UITextElement
GraphicalPoints <|-- BackgroundImage
UIElement <|.right. UITextElement
UIElement <|.left. UIGraphicalElement
GameWindow *-- Renderer
