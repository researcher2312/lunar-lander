@startuml lunar-lander
skinparam groupInheritance 3
title lunar-lander
Interface PhysicalObject{
    #m_collisions_enabled: bool
}
class RigidBody{
    #m_gravity_enabled: bool
    #m_weight: int
    #m_rotation_inertia: int
    #m_position: SDL_Point
    #m_rotation: int
    #m_speed: SDL_Point
    #m_rotation_speed: int
    #m_overall_force: SDL_Point
    +set_position()
    +set_speed()
    +move()
    +rotate()
    +set_rotation()
    +set_rotation_speed()
    +apply_force()
}
class StaticObject{

}
interface GraphicalObject{
    -color: SDL_Color
    +set_color()
    +get_color()
    +{abstract} invoke_render(Renderer&)
}
class GraphicalPoints{
    +points_are_connected: bool
    +invoke_renderer(Renderer&)
    +get_points() const: SDL_Point*
    +get_size(): int
    -points: vector<SDL_Point>

}

class GraphicalGeometry{
    +invoke_renderer(Renderer&)
    #vertex: vector<SDL_Point>
}
class GraphicalText{
    #m_rect: SDL_Rect
    #m_modified: bool
    #text: string
    #font: font_type
    +get_quad()
    +set_position()
    +set_size()
    +invoke_renderer(Renderer&)
    +set_text(string, font_type)
    +get_text()
    +get_font
}
class GraphicalBitmap{

}
interface GameObject{
    #m_position: SDL_Point
    #m_graphics: GraphicalObject*
    #m_physics: PhysicalObject*
    +draw(SDL_Renderer*)
    +get_position()
    +update()
}

class Game{
    +Game()
    +~Game()
    +start()
    +finish()
    +get_user_input()
    +update()
}

class GameWindow{
    +GameWindow()
    +~GameWindow()
    -graphical_objects: list<GameObjects>
    -SDL_Window
    -renderer: unique_ptr<Renderer>
    +update_graphics()
    +add_new_graphical_object()
    
}

class Renderer{
    +Renderer(SDL_Window*)
    +~Renderer()
    +set_drawing_color(SDL_Color)
    +clear_screen()
    +show_screem()
    +render_points(GraphicalPoints*)
    +render_line(GraphicalLines*)
    +render_geometry(GraphicalGeometry*)
    +render_text(GraphicalText*)
    -renderer: SDL_Renderer*
    -fonts: array
    -textures_for_text_rendering: unordered_map
}

class Player{
    +points
    +add_points()
    +evaluate_landing()
}
class Physics{
    -physical_objects: list
    +update_physics()
    -check_collisions()
}
together {
together {
class LandingZone{
    +award
    +get_points()
}
class Terrain{
    +Terrain()
    -generate_hills()
}
}
class BackgroundImage{
    +BackgrounImage();
    -generate_random_stars()
}
class Lander{
    +fuel
    +explode()
}
}

' class UI{
'     +get_quad(): SDL_Rect
'     -ui_elements: list
'     -fonts: array
' }
' abstract UIElement{
'     -position: SDL_Point
'     -size: SDL_Point
' }

Game *-- Physics
Game *-- Player
Game *-- Terrain
Game *-- GameWindow
' Game *-- UI
GameWindow *-down- Renderer
GameWindow *-- InputHandler

PhysicalObject <|-- RigidBody
PhysicalObject <|-- StaticObject

GraphicalObject <|.. GraphicalGeometry
GraphicalObject <|.. GraphicalPoints
GraphicalObject <|.. GraphicalText
GraphicalObject <|.. GraphicalBitmap

GameObject <|-- Terrain
GameObject <|-- Lander
GameObject <|-- LandingZone
GameObject <|-- BackgroundImage
' GraphicalText <|.. UITextElement

Lander *-- GraphicalGeometry
BackgroundImage *-- GraphicalPoints
Terrain *-- GraphicalPoints
LandingZone *-- GraphicalText

' UIElement <|.right. UITextElement
' UIElement <|.left. UIGraphicalElement
Lander  *-- RigidBody
Player *-- Lander
Terrain *-right- "1.*"LandingZone
' UI *-- "1.*" UIElement
